{"version":3,"sources":["utils/random-generator.ts","state/game-round/actions.ts","state/game-round/constants.ts","state/game/actions.ts","state/game/constants.ts","utils/rounds.ts","constants.ts","components/dual-back-grid-item.tsx","components/dual-back-grid.tsx","components/dual-n-back.tsx","state/game-round/operations.ts","state/game/operations.ts","App.tsx","reportWebVitals.ts","state/game-round/reducers.ts","state/game/reducers.ts","state/store.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["GetRandomNumber","max","Math","floor","random","GetRandomLetter","characters","charAt","length","actionCreator","actionCreatorFactory","AddGameRoundAction","ClearGameRoundsAction","SetNBackAction","getRoundsLeft","state","store","getState","gameSettingsReducer","nBack","gameRoundsReducer","rounds","DualBackGridItem","props","gameList","useSelector","round","roundLetter","Xpossition","x","Ypossition","y","Letter","undefined","useState","showLetter","setShowLetter","useEffect","setTimeout","letterViewTimeSeconds","className","DualBackGrid","gridItems","i","j","push","gridGenerator","DualNBack","dispatch","useDispatch","running","setRunning","clearGame","ClearGameRoundsOperation","interval","setInterval","msg","SpeechSynthesisUtterance","window","speechSynthesis","speak","dispach","gameRound","AddGameRoundOperation","secondsBetweenLetters","clearInterval","Slider","defaultValue","min","value","onChange","e","n","SetNBackOperation","aria-labelledby","valueLabelDisplay","disabled","Button","variant","onClick","color","hidden","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialGameState","initialGameSettings","reducerArray","action","isType","actions","payload","combineReducers","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","createStore","appState","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.cbd6dbac.chunk.js","sourcesContent":["\r\nexport const GetRandomNumber = (max: number) => {\r\n    return Math.floor(Math.random() * max);\r\n}\r\n\r\n\r\nexport const GetRandomLetter = () => {\r\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n    return characters.charAt(Math.floor(Math.random() * characters.length));\r\n}","import * as constants from \"./constants\";\r\nimport { GameRound } from \"./types\";\r\nimport actionCreatorFactory from 'typescript-fsa';\r\n\r\nconst actionCreator = actionCreatorFactory(\"GameRoundActions\");\r\n\r\n\r\nexport const AddGameRoundAction = actionCreator<{gameRound: GameRound}>(constants.ADD_GAME_ROUNDS);\r\nexport const ClearGameRoundsAction = actionCreator(constants.CLEAR_GAME_ROUNDS);","\r\n\r\nexport const ADD_GAME_ROUNDS = 'ADD_GAME_ROUNDS';\r\nexport const CLEAR_GAME_ROUNDS = 'CLEAR_GAME_ROUNDS';\r\n","import * as constants from \"./constants\";\r\nimport actionCreatorFactory from 'typescript-fsa';\r\n\r\nconst actionCreator = actionCreatorFactory(\"GameSettingActions\");\r\n\r\n\r\nexport const SetNBackAction = actionCreator<{nBack: number}>(constants.SET_N_BACK);","\r\n\r\nexport const SET_N_BACK = 'SET_N_BACK';\r\n","import store from \"..\"\r\nimport { gameLength } from \"../constants\"\r\n\r\nexport const getRoundsLeft = (): number => {\r\n    const state = store.getState();\r\n    return gameLength + state.gameSettingsReducer.nBack - state.gameRoundsReducer.rounds.length;\r\n}","\r\nexport const gameLength: number = 24;\r\nexport const secondsBetweenLetters: number = 3;\r\nexport const letterViewTimeSeconds: number = 1;","import { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { letterViewTimeSeconds } from \"../constants\";\r\nimport { GameRound } from \"../state/game-round/types\";\r\nimport { AppState } from \"../state/store\";\r\n\r\ntype Props = {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport const DualBackGridItem = (props: Props) => {\r\n    const gameList: GameRound[] = useSelector((state: AppState) => state.gameRoundsReducer.rounds);\r\n    const round: GameRound = gameList[gameList.length - 1];\r\n\r\n    const roundLetter: string | undefined = (round && round.Xpossition === props.x && round.Ypossition === props.y) ? round.Letter : undefined;\r\n\r\n    const [showLetter, setShowLetter] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (roundLetter) {\r\n            setShowLetter(true);\r\n            setTimeout(() => { setShowLetter(false); }, letterViewTimeSeconds * 1000);\r\n        }\r\n    }, [round, roundLetter])\r\n\r\n    return (\r\n        <div className={\"grid-item \" + ((roundLetter && showLetter) ? \"active-letter\" : \"letter\")}>\r\n            {roundLetter && showLetter &&\r\n                <h1>{roundLetter}</h1>\r\n            }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\n","import { DualBackGridItem } from \"./dual-back-grid-item\"\r\nimport \"./dual-back.scss\";\r\n\r\n\r\nexport const DualBackGrid = () => {\r\n\r\n    const gridGenerator = (): JSX.Element[] => {\r\n        let gridItems: JSX.Element[] = [];\r\n        for (let i = 0; i < 3; i++) {\r\n            for (let j = 0; j < 3; j++) {\r\n                gridItems.push(<DualBackGridItem x={i} y={j} key={\"grid possition: \" + i + j} />);\r\n            }\r\n        }\r\n        return gridItems;\r\n    }\r\n\r\n    return (\r\n        <div className=\"dual-back-grid-container\">\r\n            {gridGenerator()}\r\n        </div>\r\n    )\r\n}","import { Button, Slider } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { secondsBetweenLetters } from '../constants';\r\nimport { AddGameRoundOperation, ClearGameRoundsOperation } from '../state/game-round/operations';\r\nimport { SetNBackOperation } from '../state/game/operations';\r\nimport { AppState } from '../state/store';\r\nimport { getRoundsLeft } from '../utils/rounds';\r\nimport { DualBackGrid } from './dual-back-grid';\r\n\r\n\r\nexport function DualNBack() {\r\n    const dispatch = useDispatch()\r\n    useSelector((state: AppState) => state.gameRoundsReducer.rounds);   //Only here to update EffectHook\r\n    const nBack: number = useSelector((state: AppState) => state.gameSettingsReducer.nBack);\r\n\r\n    const [running, setRunning] = useState(false);\r\n\r\n    const setNBack = (e: React.ChangeEvent<{}>, n: number | number[]) => {\r\n        if (typeof n === \"number\") {\r\n            SetNBackOperation(n)(dispatch);\r\n        }\r\n    }\r\n\r\n    const newGame = () => {\r\n        setRunning(true);\r\n    }\r\n\r\n\r\n    const clearGame = () => {\r\n        setRunning(false);\r\n        ClearGameRoundsOperation()(dispatch);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (getRoundsLeft() === 0)\r\n            clearGame();\r\n\r\n        const interval = setInterval(() => {\r\n            if (running)\r\n                AddGameRoundOperation()(dispatch);\r\n        }, secondsBetweenLetters * 1000);\r\n\r\n        if (!running)\r\n            clearInterval(interval);\r\n        return () => clearInterval(interval);\r\n    });\r\n\r\n    return (\r\n        <div className=\"center\">\r\n            <h1>Welcome to DualBallzBack</h1>\r\n\r\n            <div className=\"grid-container-3\">\r\n                <div className=\"flex-row\">\r\n                    <p className=\"margin-right-10px\"> Set N-back:</p>\r\n                    <div className=\"width-50px padding-top-5px\">\r\n                        <Slider\r\n                            defaultValue={1}\r\n                            min={1}\r\n                            max={10}\r\n                            value={nBack}\r\n                            onChange={setNBack}\r\n                            aria-labelledby=\"discrete-slider\"\r\n                            valueLabelDisplay=\"auto\"\r\n                            disabled={running}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    onClick={running ? clearGame : newGame}\r\n                    color={running ? \"secondary\" : \"default\"}\r\n                >\r\n                    {running ? \"Stop Game\" : \"New Game\"}\r\n                </Button>\r\n\r\n                <p hidden={!running}>Rounds left: {getRoundsLeft()}</p>\r\n\r\n            </div>\r\n            <br />\r\n\r\n            <DualBackGrid />\r\n        </div>\r\n    );\r\n}\r\n","import { Dispatch } from \"redux\";\r\nimport { GetRandomLetter, GetRandomNumber } from \"../../utils/random-generator\";\r\nimport { AddGameRoundAction, ClearGameRoundsAction } from \"./actions\";\r\nimport { GameRound } from \"./types\";\r\n\r\n\r\nexport const AddGameRoundOperation = () => {\r\n    const round: GameRound = {\r\n        Xpossition: GetRandomNumber(3),\r\n        Ypossition: GetRandomNumber(3),\r\n        Letter: GetRandomLetter()\r\n    }\r\n    var msg = new SpeechSynthesisUtterance(round.Letter);\r\n    window.speechSynthesis.speak(msg);\r\n    return (dispach: Dispatch) => dispach(AddGameRoundAction({ gameRound: round }));\r\n}\r\n\r\n\r\nexport const ClearGameRoundsOperation = () => {\r\n    return (dispatch: Dispatch) => dispatch(ClearGameRoundsAction());\r\n}","import { Dispatch } from \"redux\";\r\nimport { SetNBackAction } from \"./actions\";\r\n\r\nexport const SetNBackOperation = (n: number) => {\r\n    return (dispatch: Dispatch) => dispatch(SetNBackAction({ nBack: n }));\r\n}","import React from 'react';\r\nimport { DualNBack } from './components/dual-n-back';\r\nimport \"./App.scss\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <DualNBack />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import * as actions from \"./actions\";\r\nimport { Action } from \"redux\";\r\nimport { isType } from 'typescript-fsa';\r\nimport { GameRounds } from \"./types\";\r\n\r\n\r\nexport const initialGameState: GameRounds = {\r\n    rounds: [],\r\n};\r\n\r\n\r\nexport function gameRoundsReducer(state: typeof initialGameState = initialGameState, action: Action): typeof initialGameState {\r\n    if (isType(action, actions.AddGameRoundAction)) {\r\n        return {\r\n            ...state, rounds: [...state.rounds, action.payload.gameRound]\r\n        }\r\n    }\r\n\r\n    if (isType(action, actions.ClearGameRoundsAction)) {\r\n        return {\r\n            ...state, rounds: []\r\n        }\r\n    }\r\n\r\n\r\n    return state;\r\n}","import * as actions from \"./actions\";\r\nimport { Action } from \"redux\";\r\nimport { isType } from 'typescript-fsa';\r\nimport { Gamesettings } from \"./types\";\r\n\r\n\r\nexport const initialGameSettings: Gamesettings = {\r\n    nBack: 1,\r\n};\r\n\r\n\r\nexport function gameSettingsReducer(state: typeof initialGameSettings = initialGameSettings, action: Action): typeof initialGameSettings {\r\n    if (isType(action, actions.SetNBackAction)) {\r\n        return {\r\n            ...state, nBack: action.payload.nBack \r\n        }\r\n    }\r\n\r\n    return state;\r\n}","import { combineReducers } from 'redux';\r\nimport { gameRoundsReducer } from './game-round/reducers';\r\nimport { gameSettingsReducer } from './game/reducers';\r\n\r\nconst reducerArray = {\r\n    gameRoundsReducer,\r\n    gameSettingsReducer,\r\n}\r\n\r\n\r\nconst store = combineReducers({\r\n    ...reducerArray\r\n})\r\n\r\n\r\nexport type coreAppState = {\r\n    [K in keyof typeof reducerArray]: ReturnType<typeof reducerArray[K]>;\r\n}\r\n\r\nexport type AppState = coreAppState;\r\n\r\nexport default store;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister().then((s) => console.log('Service-Worker is now unregistered'));\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport appState from \"./state/store\";\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\n\r\nconst store = createStore(appState);\r\nexport default store;\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}