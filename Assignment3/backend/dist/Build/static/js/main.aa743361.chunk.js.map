{"version":3,"sources":["constants.ts","utils/random-generator.ts","state/game-round/actions.ts","state/game-round/constants.ts","state/game/actions.ts","state/game/constants.ts","state/game/operations.ts","utils/rounds.ts","components/dual-back-grid-item.tsx","components/dual-back-grid.tsx","components/dual-n-back.tsx","state/game-round/operations.ts","components/pages/Game.tsx","state/auth/actions.ts","state/auth/constants.ts","state/auth/operations.ts","components/auth/Login.tsx","components/auth/Register.tsx","components/auth/AuthOptions.tsx","components/layout/Header.tsx","components/auth/private-route.tsx","state/highscore/actions.ts","state/highscore/constants.ts","state/highscore/operations.ts","components/highscore-display.tsx","App.tsx","reportWebVitals.ts","state/game-round/reducers.ts","state/game/reducers.ts","state/auth/reducers.ts","state/highscore/reducers.ts","state/store.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["AccessToken","GetRandomNumber","max","Math","floor","random","GetRandomLetter","characters","charAt","length","actionCreator","actionCreatorFactory","AddGameRoundAction","ClearGameRoundsAction","SetNBackAction","SetIsRunningAction","AddToSameLetterAction","AddToSameLocationAction","ClearScoreAction","SetIsRunningOperation","isRunning","dispatch","AddToCorrectLocationOperation","amountToAdd","AddToCorrectLetterOperation","getRoundsLeft","state","store","getState","gameSettingsReducer","gameSettings","nBack","gameRoundsReducer","rounds","DualBackGridItem","props","gameList","useSelector","round","roundLetter","Xpossition","x","Ypossition","y","Letter","undefined","useState","showLetter","setShowLetter","useEffect","setTimeout","letterViewTimeSeconds","className","DualBackGrid","useDispatch","onClick","curr","last","onContextMenu","e","preventDefault","gridItems","i","j","push","gridGenerator","DualNBack","numberOfCorrectLocation","currentGameScore","correctSameLocation","numberOfCorrectLetter","correctSameLetter","clearGame","ClearGameRoundsOperation","secondsBetweenLetters","interval","setInterval","msg","SpeechSynthesisUtterance","window","speechSynthesis","speak","dispach","gameRound","AddGameRoundOperation","clearInterval","Slider","defaultValue","min","value","onChange","n","SetNBackOperation","aria-labelledby","valueLabelDisplay","disabled","Button","variant","ClearScoreOperation","color","hidden","Game","SetIsLoggedInAction","SetIsLoggedInOperation","isLoggedIn","Login","history","useHistory","userName","setUserName","userPassword","setUserPassword","event","a","console","log","fetch","method","headers","body","JSON","stringify","username","password","then","response","json","data","token","localStorage","setItem","TextField","label","type","target","Register","userConfirmPassword","setUserConfirmPassword","confirmPassword","AuthOptions","isAuthenticated","authReducer","clear","Header","id","to","PrivateRoute","exact","path","component","AddNewScoreAction","GetHighScoresAction","async","GetHighSCoresOperation","highScores","forEach","highscore","time","Date","done","params","result","HighscoreDisplay","highscores","highScoreReducer","getHighScores","TableContainer","Paper","TableHead","TableRow","TableCell","TableBody","sort","b","score","map","level","toLocaleDateString","toLocaleTimeString","App","HOST","location","origin","replace","ws","WebSocket","process","REACT_APP_BACKEND_WS_URL","onopen","onmessage","evt","message","parse","onclose","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialGameState","initialGameSettings","initialHighScore","reducerArray","action","isType","actions","payload","highScore","combineReducers","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","createStore","appState","ReactDOM","render","document","getElementById","URL","href","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.aa743361.chunk.js","sourcesContent":["\r\nexport const gameLength: number = 24;\r\nexport const secondsBetweenLetters: number = 3;\r\nexport const letterViewTimeSeconds: number = 1;\r\n\r\n\r\nexport const AccessToken: string = \"AccessToken\";","\r\nexport const GetRandomNumber = (max: number) => {\r\n    return Math.floor(Math.random() * max);\r\n}\r\n\r\n\r\nexport const GetRandomLetter = () => {\r\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n    return characters.charAt(Math.floor(Math.random() * characters.length));\r\n}","import * as constants from \"./constants\";\r\nimport { GameRound } from \"./types\";\r\nimport actionCreatorFactory from 'typescript-fsa';\r\n\r\nconst actionCreator = actionCreatorFactory(\"GameRoundActions\");\r\n\r\n\r\nexport const AddGameRoundAction = actionCreator<{gameRound: GameRound}>(constants.ADD_GAME_ROUNDS);\r\nexport const ClearGameRoundsAction = actionCreator(constants.CLEAR_GAME_ROUNDS);","\r\n\r\nexport const ADD_GAME_ROUNDS = 'ADD_GAME_ROUNDS';\r\nexport const CLEAR_GAME_ROUNDS = 'CLEAR_GAME_ROUNDS';\r\n","import * as constants from \"./constants\";\r\nimport actionCreatorFactory from 'typescript-fsa';\r\n\r\nconst actionCreator = actionCreatorFactory(\"GameSettingActions\");\r\n\r\n\r\nexport const SetNBackAction = actionCreator<{nBack: number}>(constants.SET_N_BACK);\r\nexport const SetIsRunningAction = actionCreator<{isRunning: boolean}>(constants.SET_IS_RUNNING);\r\nexport const AddToSameLetterAction = actionCreator<{amountToAdd: number}>(constants.ADD_TO_SAME_LETTER);\r\nexport const AddToSameLocationAction = actionCreator<{amountToAdd: number}>(constants.ADD_TO_SAME_LOCATION);\r\nexport const ClearScoreAction = actionCreator(constants.CLEAR_SCORE);","export const SET_N_BACK = 'SET_N_BACK';\r\nexport const SET_IS_RUNNING = 'SET_IS_RUNNING';\r\nexport const ADD_TO_SAME_LETTER = 'ADD_TO_SAME_LETTER';\r\nexport const ADD_TO_SAME_LOCATION = 'ADD_TO_SAME_LOCATION';\r\nexport const CLEAR_SCORE = \"CLEAR_SCORE\";\r\n\r\n","import { Dispatch } from \"redux\";\r\nimport { AddToSameLetterAction, AddToSameLocationAction, ClearScoreAction, SetIsRunningAction, SetNBackAction } from \"./actions\";\r\n\r\nexport const SetNBackOperation = (n: number) => {\r\n    return (dispatch: Dispatch) => dispatch(SetNBackAction({ nBack: n }));\r\n}\r\n\r\nexport const SetIsRunningOperation = (isRunning: boolean) => {\r\n    return (dispatch: Dispatch) => dispatch(SetIsRunningAction({ isRunning }));\r\n}\r\n\r\nexport const AddToCorrectLocationOperation = (amountToAdd: number) => {\r\n    return (dispatch: Dispatch) => dispatch(AddToSameLocationAction({ amountToAdd }));\r\n}\r\n\r\nexport const AddToCorrectLetterOperation = (amountToAdd: number) => {\r\n    return (dispatch: Dispatch) => dispatch(AddToSameLetterAction({ amountToAdd }));\r\n}\r\n\r\nexport const ClearScoreOperation = () => {\r\n    return (dispatch: Dispatch) => dispatch(ClearScoreAction());\r\n}","import store from \"..\"\r\nimport { gameLength } from \"../constants\"\r\n\r\nexport const getRoundsLeft = (): number => {\r\n    const state = store.getState();\r\n    return gameLength + state.gameSettingsReducer.gameSettings.nBack - state.gameRoundsReducer.rounds.length;\r\n}","import { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { letterViewTimeSeconds } from \"../constants\";\r\nimport { GameRound } from \"../state/game-round/types\";\r\nimport { AppState } from \"../state/store\";\r\n\r\ntype Props = {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport const DualBackGridItem = (props: Props) => {\r\n    const gameList: GameRound[] = useSelector((state: AppState) => state.gameRoundsReducer.rounds);\r\n    const round: GameRound = gameList[gameList.length - 1];\r\n\r\n    const roundLetter: string | undefined = (round && round.Xpossition === props.x && round.Ypossition === props.y) ? round.Letter : undefined;\r\n\r\n    const [showLetter, setShowLetter] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (roundLetter) {\r\n            setShowLetter(true);\r\n            setTimeout(() => { setShowLetter(false); }, letterViewTimeSeconds * 1000);\r\n        }\r\n    }, [round, roundLetter])\r\n\r\n    return (\r\n        <div className={\"grid-item \" + ((roundLetter && showLetter) ? \"active-letter\" : \"letter\")}>\r\n            {roundLetter && showLetter &&\r\n                <h1>{roundLetter}</h1>\r\n            }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { GameRound } from \"../state/game-round/types\";\r\nimport { AddToCorrectLetterOperation, AddToCorrectLocationOperation } from \"../state/game/operations\";\r\nimport { AppState } from \"../state/store\";\r\nimport { DualBackGridItem } from \"./dual-back-grid-item\"\r\nimport \"./dual-back.scss\";\r\n\r\n\r\nexport const DualBackGrid = () => {\r\n    const nBack: number = useSelector((state: AppState) => state.gameSettingsReducer.gameSettings.nBack);\r\n    const isRunning: boolean = useSelector((state: AppState) => state.gameSettingsReducer.gameSettings.isRunning);\r\n    const rounds: GameRound[] = useSelector((state: AppState) => state.gameRoundsReducer.rounds);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const checkSameLocation = () => {\r\n        if (!isRunning) return;\r\n        if (rounds.length > nBack) {\r\n            const curr: GameRound = rounds[rounds.length - 1];\r\n            const last: GameRound = rounds[rounds.length - (nBack + 1)];\r\n\r\n\r\n            if (curr.Xpossition === last.Xpossition && curr.Ypossition === last.Ypossition)\r\n                return AddToCorrectLocationOperation(1)(dispatch);\r\n        }\r\n\r\n        return AddToCorrectLocationOperation(-1)(dispatch);\r\n    }\r\n\r\n    const checkSameLetter = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        e.preventDefault();\r\n        if (!isRunning) return;\r\n        if (rounds.length > nBack) {\r\n            const curr: string = rounds[rounds.length - 1].Letter;\r\n            const last: string = rounds[rounds.length - (nBack + 1)].Letter;\r\n\r\n            if (curr === last)\r\n                return AddToCorrectLetterOperation(1)(dispatch);\r\n        }\r\n\r\n        return AddToCorrectLetterOperation(-1)(dispatch);\r\n    }\r\n\r\n\r\n    const gridGenerator = (): JSX.Element[] => {\r\n        let gridItems: JSX.Element[] = [];\r\n        for (let i = 0; i < 3; i++) {\r\n            for (let j = 0; j < 3; j++) {\r\n                gridItems.push(<DualBackGridItem x={i} y={j} key={\"grid possition: \" + i + j} />);\r\n            }\r\n        }\r\n        return gridItems;\r\n    }\r\n\r\n    return (\r\n        <div className=\"dual-back-grid-container\" onClick={checkSameLocation} onContextMenu={checkSameLetter} >\r\n            {gridGenerator()}\r\n        </div>\r\n    )\r\n}","import { Button, Slider } from '@material-ui/core';\r\nimport React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { secondsBetweenLetters } from '../constants';\r\nimport { AddGameRoundOperation, ClearGameRoundsOperation } from '../state/game-round/operations';\r\nimport { ClearScoreOperation, SetIsRunningOperation, SetNBackOperation } from '../state/game/operations';\r\nimport { AppState } from '../state/store';\r\nimport { getRoundsLeft } from '../utils/rounds';\r\nimport { DualBackGrid } from './dual-back-grid';\r\n\r\n\r\nexport function DualNBack() {\r\n    const dispatch = useDispatch();\r\n    useSelector((state: AppState) => state.gameRoundsReducer.rounds);   //Only here to update EffectHook\r\n    const isRunning = useSelector((state: AppState) => state.gameSettingsReducer.gameSettings.isRunning);\r\n    const nBack: number = useSelector((state: AppState) => state.gameSettingsReducer.gameSettings.nBack);\r\n    const numberOfCorrectLocation: number = useSelector((state: AppState) => state.gameSettingsReducer.currentGameScore.correctSameLocation);\r\n    const numberOfCorrectLetter: number = useSelector((state: AppState) => state.gameSettingsReducer.currentGameScore.correctSameLetter);\r\n\r\n    const setNBack = (e: React.ChangeEvent<{}>, n: number | number[]) => {\r\n        if (typeof n === \"number\") {\r\n            SetNBackOperation(n)(dispatch);\r\n        }\r\n    }\r\n\r\n    const newGame = () => {\r\n        ClearScoreOperation()(dispatch);\r\n        SetIsRunningOperation(true)(dispatch);\r\n    }\r\n\r\n\r\n    const clearGame = () => {\r\n        SetIsRunningOperation(false)(dispatch);\r\n        ClearGameRoundsOperation()(dispatch);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (getRoundsLeft() === 0) {\r\n            setTimeout(() => {\r\n                clearGame();\r\n            }, secondsBetweenLetters * 1000)\r\n        }\r\n\r\n        const interval = setInterval(() => {\r\n            if (isRunning)\r\n                AddGameRoundOperation()(dispatch);\r\n        }, secondsBetweenLetters * 1000);\r\n\r\n        if (!isRunning)\r\n            clearInterval(interval);\r\n        return () => clearInterval(interval);\r\n    });\r\n\r\n    return (\r\n        <div className=\"center\">\r\n            <h1>Welcome to DualBallzBack</h1>\r\n\r\n            <div className=\"grid-container-3\">\r\n                <div className=\"flex-row\">\r\n                    <p className=\"margin-right-10px\"> Set N-back:</p>\r\n                    <div className=\"width-50px padding-top-5px\">\r\n                        <Slider\r\n                            defaultValue={1}\r\n                            min={1}\r\n                            max={10}\r\n                            value={nBack}\r\n                            onChange={setNBack}\r\n                            aria-labelledby=\"discrete-slider\"\r\n                            valueLabelDisplay=\"auto\"\r\n                            disabled={isRunning}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    onClick={isRunning ? clearGame : newGame}\r\n                    color={isRunning ? \"secondary\" : \"default\"}\r\n                >\r\n                    {isRunning ? \"Stop Game\" : \"New Game\"}\r\n                </Button>\r\n\r\n                <div>\r\n                    <p hidden={!isRunning}>Rounds left: {getRoundsLeft()}</p>\r\n                    <p hidden={isRunning}>Correct by letter: {numberOfCorrectLocation}</p>\r\n                    <p hidden={isRunning}>Correct by location: {numberOfCorrectLetter}</p>\r\n                </div>\r\n            </div>\r\n            <br />\r\n\r\n            <DualBackGrid />\r\n        </div>\r\n    );\r\n}\r\n","import { Dispatch } from \"redux\";\r\nimport { GetRandomLetter, GetRandomNumber } from \"../../utils/random-generator\";\r\nimport { AddGameRoundAction, ClearGameRoundsAction } from \"./actions\";\r\nimport { GameRound } from \"./types\";\r\n\r\n\r\nexport const AddGameRoundOperation = () => {\r\n    const round: GameRound = {\r\n        Xpossition: GetRandomNumber(3),\r\n        Ypossition: GetRandomNumber(3),\r\n        Letter: GetRandomLetter()\r\n    }\r\n    var msg = new SpeechSynthesisUtterance(round.Letter);\r\n    window.speechSynthesis.speak(msg);\r\n    return (dispach: Dispatch) => dispach(AddGameRoundAction({ gameRound: round }));\r\n}\r\n\r\n\r\nexport const ClearGameRoundsOperation = () => {\r\n    return (dispatch: Dispatch) => dispatch(ClearGameRoundsAction());\r\n}","import React from 'react'\r\n\r\nimport { DualNBack } from '../dual-n-back';\r\n\r\nfunction Game() {\r\n    return (\r\n        <DualNBack/>\r\n    )\r\n}\r\n\r\n\r\nexport default Game\r\n\r\n","import * as constants from \"./constants\";\r\nimport actionCreatorFactory from 'typescript-fsa';\r\n\r\nconst actionCreator = actionCreatorFactory(\"AuthActions\");\r\n\r\nexport const SetIsLoggedInAction = actionCreator<{isLoggedIn: boolean}>(constants.IS_LOGGED_IN);\r\n","export const IS_LOGGED_IN = 'IS_LOGGED_IN';\r\n\r\n\r\n","import { Dispatch } from \"redux\";\r\nimport { SetIsLoggedInAction } from \"./actions\";\r\n\r\nexport const SetIsLoggedInOperation = (isLoggedIn: boolean) => {\r\n    return (dispatch: Dispatch) => dispatch(SetIsLoggedInAction({ isLoggedIn }));\r\n}\r\n\r\n","import React, { useState } from 'react'\r\nimport {TextField} from '@material-ui/core'\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { Route, useHistory } from 'react-router-dom';\r\nimport { SetIsLoggedInOperation } from '../../state/auth/operations';\r\nimport './Login.scss';\r\nimport Button from '@material-ui/core/Button';\r\nimport { AccessToken } from '../../constants';\r\n\r\nfunction Login() {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const [userName, setUserName] = useState('');\r\n    const [userPassword, setUserPassword] = useState('');\r\n\r\n    async function handleSubmit(event: any) {\r\n        console.log(userName, userPassword);\r\n        \r\n        // Something async\r\n\r\n        /*\r\n        const response = await fetch('/api/auth/login', {\r\n                        method: 'POST', \r\n                        headers: {'Content-Type': 'application/json'}, \r\n                        body: JSON.stringify({username: userName, password: userPassword})});\r\n        */\r\n        \r\n        await fetch('/api/auth/login', {\r\n            method: 'POST', \r\n            headers: {'Content-Type': 'application/json'}, \r\n            body: JSON.stringify({username: userName, password: userPassword})})\r\n            .then(response=>response.json())\r\n            .then(data => data.token)\r\n            .then(token=> \r\n            {\r\n                localStorage.setItem(AccessToken, token)\r\n                SetIsLoggedInOperation(true)(dispatch);\r\n                history.push('/');\r\n            });\r\n\r\n        /*\r\n        console.log(response.status)\r\n\r\n        if (response.status === 200)\r\n        {\r\n            console.log('user auth - 200 ok');\r\n            SetIsLoggedInOperation(true)(dispatch);\r\n            history.push('/')\r\n        }\r\n        */\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"input-box\">Log In</h1>\r\n            <p className=\"input-box\">Enter username and password:</p>\r\n            <div className=\"input-box\"><TextField color=\"primary\" label=\"User Name\" type='text' value={userName} onChange={(e) => setUserName(e.target.value)} /></div>\r\n            <div className=\"input-box\"><TextField label=\"Password\" type='password' value={userPassword} onChange={(e) => setUserPassword(e.target.value)} />\r\n            <div className=\"login-button\"><Button variant=\"contained\" onClick={handleSubmit}>login</Button></div></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useState} from 'react'\r\nimport {TextField} from '@material-ui/core'\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { useHistory } from 'react-router-dom';\r\nimport { SetIsLoggedInOperation } from '../../state/auth/operations';\r\nimport './Login.scss';\r\nimport Button from '@material-ui/core/Button';\r\nimport { AccessToken } from '../../constants';\r\n\r\nfunction Register() {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const [userName, setUserName] = useState('');\r\n    const [userPassword, setUserPassword] = useState('');\r\n    const [userConfirmPassword, setUserConfirmPassword] = useState('');\r\n\r\n    async function handleSubmit(event: any) {\r\n        console.log(userName, userPassword);\r\n        \r\n        // Something async\r\n\r\n        await fetch('/api/auth/registration', {\r\n            method: 'POST', \r\n            headers: {'Content-Type': 'application/json'}, \r\n            body: JSON.stringify({username: userName, password: userPassword, confirmPassword: userConfirmPassword})})\r\n            .then(response=>response.json())\r\n            .then(data => data.token)\r\n            .then(token=> \r\n            {\r\n                localStorage.setItem(AccessToken, token)\r\n                SetIsLoggedInOperation(true)(dispatch);\r\n                history.push('/');\r\n            });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"input-box\">Register</h1>\r\n            <p className=\"input-box\">Enter username and password:</p>\r\n            <div className=\"input-box\"><TextField label=\"User Name\" type='text' value={userName} onChange={(e) => setUserName(e.target.value)} /></div>\r\n            <div className=\"input-box\"><TextField label=\"Password\" type='password' value={userPassword} onChange={(e) => setUserPassword(e.target.value)} /></div>\r\n            <div className=\"input-box\"><TextField label=\"Confirm Password\" type='password' value={userConfirmPassword} onChange={(e) => setUserConfirmPassword(e.target.value)} /></div>\r\n            <div className=\"login-button\"><Button variant=\"contained\" onClick={handleSubmit}>Submit</Button></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register\r\n\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { SetIsLoggedInOperation } from '../../state/auth/operations';\r\nimport { AppState } from '../../state/store';\r\n\r\nfunction AuthOptions() {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const isAuthenticated = useSelector((state: AppState) => state.authReducer.isLoggedIn)\r\n\r\n    const logout = () => {\r\n        SetIsLoggedInOperation(false)(dispatch);\r\n        window.localStorage.clear();\r\n    }\r\n\r\n    // Use history to change url\r\n    const history = useHistory();\r\n    const register = () => history.push(\"/register\");\r\n    const login = () => history.push(\"/login\");\r\n\r\n    return (\r\n        <nav className=\"auth-options\">\r\n            {isAuthenticated ? (\r\n                <button onClick={logout}>Log Out</button>\r\n            ) : (\r\n                    <>\r\n                        <button onClick={register}>Register</button>\r\n                        <button onClick={login}>Log in</button>\r\n                    </>\r\n                )}\r\n\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default AuthOptions\r\n\r\n","import React from 'react'\r\nimport {Link, useHistory} from \"react-router-dom\";\r\nimport AuthOptions from '../auth/AuthOptions'\r\n\r\nfunction Header() {\r\n    const history = useHistory();\r\n    return (\r\n        <header id=\"header\">\r\n            <Link to=\"/\">\r\n                <h1 className=\"title\">Dual-Ballz-Back</h1>\r\n            </Link>\r\n            <nav className=\"auth-options\">\r\n                <button onClick={() => history.push('/highscore')}>Highscores</button>\r\n            </nav>\r\n            <AuthOptions />\r\n        </header>\r\n    )\r\n}\r\n\r\n\r\nexport default Header\r\n\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState } from '../../state/store';\r\n\r\nimport { RouteProps, Route } from \"react-router-dom\";\r\nimport Login from './Login';\r\n\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nfunction PrivateRoute(props: RouteProps){\r\n    const isLoggedIn =  useSelector((state: AppState) => state.authReducer.isLoggedIn)  \r\n\r\n    const history = useHistory();\r\n\r\n    if (!isLoggedIn)\r\n        history.push('/login')\r\n    \r\n    return (\r\n        <div>\r\n            {\r\n                props.exact ?\r\n                    <Route exact={true} path={props.path} component={props.component} /> \r\n                    :\r\n                    <Route exact={false} path={props.path} component={props.component} />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PrivateRoute;","import * as constants from \"./constants\";\r\nimport actionCreatorFactory from 'typescript-fsa';\r\nimport { highScore } from \"./types\";\r\nconst actionCreator = actionCreatorFactory(\"HighScores\");\r\n\r\n\r\nexport const AddNewScoreAction = actionCreator<{highScore: highScore}>(constants.ADD_NEW_HIGHSCORE);\r\nexport const GetHighScoresAction = actionCreator.async<undefined, {highScores: highScore[]}>(constants.GET_HIGHSCORES);\r\n","export const ADD_NEW_HIGHSCORE = 'ADD_NEW_HIGHSCORE';\r\nexport const GET_HIGHSCORES = 'GET_HIGHSCORES';\r\n\r\n","import { Dispatch } from \"redux\";\r\nimport store from \"../..\";\r\nimport { AccessToken } from \"../../constants\";\r\nimport { AddNewScoreAction, GetHighScoresAction } from \"./actions\";\r\nimport { highScore } from \"./types\";\r\n\r\nexport const GetHighSCoresOperation = async () => {\r\n    const nBack = store.getState().gameSettingsReducer.gameSettings.nBack;\r\n\r\n    const response = await fetch(`/api//highscore?level=${nBack}`, {\r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/json' },\r\n    }).then(response => response.json())\r\n        .then(data => data as highScore[])\r\n        .then(highScores => {\r\n            highScores.forEach(highscore => {\r\n                highscore.time = new Date(highscore.time);\r\n            })\r\n            return highScores;\r\n        });\r\n\r\n    return (dispatch: Dispatch) => dispatch(GetHighScoresAction.done({\r\n        params: undefined, result: { highScores: response }\r\n    }));\r\n}\r\n\r\nexport const AddNewHighScoreOperation = async (highScore: highScore) => {\r\n    await fetch(`/api//highscore`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'bearer ' + window.localStorage.getItem(AccessToken),\r\n        },\r\n        body: JSON.stringify(highScore),\r\n    })\r\n    return (dispatch: Dispatch) => dispatch(AddNewScoreAction({ highScore }));\r\n}\r\n","import {\r\n    Paper,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow\r\n} from \"@material-ui/core\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { GetHighSCoresOperation } from \"../state/highscore/operations\";\r\nimport { AppState } from \"../state/store\";\r\nimport './highscore-display.scss';\r\n\r\n\r\nexport function HighscoreDisplay() {\r\n    const dispatch = useDispatch();\r\n\r\n    const highscores = useSelector((state: AppState) => state.highScoreReducer.highScores)\r\n\r\n    const getHighScores = async () => {\r\n        (await GetHighSCoresOperation())(dispatch);\r\n    }\r\n    useEffect(() => {\r\n        getHighScores();\r\n    }, [])\r\n    const nBack: number = useSelector((state: AppState) => state.gameSettingsReducer.gameSettings.nBack);\r\n\r\n    return (\r\n        <div className=\"tableContainer\">\r\n            <h2>Here you can see the highscores of other users, on the same level as you ({nBack})</h2>\r\n            <TableContainer component={Paper} className=\"tableContainer\">\r\n                <table className=\"table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell className=\"item\">Level</TableCell>\r\n                            <TableCell className=\"item\">Score</TableCell>\r\n                            <TableCell className=\"item\">Time</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {highscores.sort((a, b) => (a.score > b.score) ? -1 : 1).map((highscore) => (\r\n                            <TableRow>\r\n                                <TableCell className=\"item\">{highscore.level}</TableCell>\r\n                                <TableCell className=\"item\">{highscore.score}</TableCell>\r\n                                <TableCell className=\"item\">{highscore.time.toLocaleDateString() + \" \" + highscore.time.toLocaleTimeString()}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </table>\r\n            </TableContainer>\r\n        </div>\r\n    )\r\n}\r\n","\r\nimport React, { useEffect } from 'react';\r\nimport './style/style.css';\r\nimport \"./App.scss\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport Game from './components/pages/Game'\r\nimport Login from './components/auth/Login'\r\nimport Register from './components/auth/Register'\r\nimport Header from './components/layout/Header'\r\nimport PrivateRoute from './components/auth/private-route';\r\nimport { HighscoreDisplay } from \"./components/highscore-display\";\r\nimport {GetHighSCoresOperation} from \"./state/highscore/operations\";\r\n\r\nfunction App() {\r\n  let HOST = window.location.origin.replace(/^http/, 'ws')\r\n  const ws = new WebSocket(process.env.REACT_APP_BACKEND_WS_URL || HOST);\r\n\r\n  useEffect(() => {\r\n    ws.onopen = () => {\r\n      // on connecting, do nothing but log it to the console\r\n      console.log('connected')\r\n    }\r\n\r\n    ws.onmessage = evt => {\r\n      // listen to data sent from the websocket server\r\n      const message = JSON.parse(evt.data);\r\n      console.log(message);\r\n      GetHighSCoresOperation()(dispatch);\r\n    }\r\n\r\n    ws.onclose = () => {\r\n      console.log('disconnected')\r\n      // automatically try to reconnect on connection loss\r\n\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <BrowserRouter>\r\n        <Header />\r\n        <Switch>\r\n          <PrivateRoute exact path=\"/\" component={Game} />\r\n          <Route path=\"/login\" component={Login} />\r\n          <Route path=\"/register\" component={Register} />\r\n          <Route path=\"/highscore\" component={HighscoreDisplay} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import * as actions from \"./actions\";\r\nimport { Action } from \"redux\";\r\nimport { isType } from 'typescript-fsa';\r\nimport { GameRounds } from \"./types\";\r\n\r\n\r\nexport const initialGameState: GameRounds = {\r\n    rounds: [],\r\n};\r\n\r\n\r\nexport function gameRoundsReducer(state: typeof initialGameState = initialGameState, action: Action): typeof initialGameState {\r\n    if (isType(action, actions.AddGameRoundAction)) {\r\n        return {\r\n            ...state, rounds: [...state.rounds, action.payload.gameRound]\r\n        }\r\n    }\r\n\r\n    if (isType(action, actions.ClearGameRoundsAction)) {\r\n        return {\r\n            ...state, rounds: []\r\n        }\r\n    }\r\n\r\n\r\n    return state;\r\n}","import * as actions from \"./actions\";\r\nimport { Action } from \"redux\";\r\nimport { isType } from 'typescript-fsa';\r\nimport { Game } from \"./types\";\r\n\r\n\r\nexport const initialGameSettings: Game = {\r\n    gameSettings: {\r\n        nBack: 1,\r\n        isRunning: false,\r\n    },\r\n    currentGameScore: {\r\n        correctSameLocation: 0,\r\n        correctSameLetter: 0,\r\n    },\r\n\r\n};\r\n\r\n\r\nexport function gameSettingsReducer(state: typeof initialGameSettings = initialGameSettings, action: Action): typeof initialGameSettings {\r\n    if (isType(action, actions.SetNBackAction)) {\r\n        return {\r\n            ...state, gameSettings: {\r\n                ...state.gameSettings, nBack: action.payload.nBack\r\n            }\r\n        }\r\n    }\r\n\r\n    if (isType(action, actions.SetIsRunningAction)) {\r\n        return {\r\n            ...state, gameSettings: {\r\n                ...state.gameSettings, isRunning: action.payload.isRunning\r\n            }\r\n        }\r\n    }\r\n\r\n    if (isType(action, actions.AddToSameLetterAction)) {\r\n        return {\r\n            ...state, currentGameScore: {\r\n                ...state.currentGameScore, correctSameLetter: state.currentGameScore.correctSameLetter + action.payload.amountToAdd\r\n            }\r\n        }\r\n    }\r\n\r\n    if (isType(action, actions.AddToSameLocationAction)) {\r\n        return {\r\n            ...state, currentGameScore: {\r\n                ...state.currentGameScore, correctSameLocation: state.currentGameScore.correctSameLocation += action.payload.amountToAdd\r\n            }\r\n        }\r\n    }\r\n\r\n    if (isType(action, actions.ClearScoreAction)) {\r\n        return {\r\n            ...state, currentGameScore: {\r\n                ...state.currentGameScore,\r\n                correctSameLocation: 0,\r\n                correctSameLetter: 0\r\n            }\r\n        }\r\n    }\r\n\r\n    return state;\r\n}","import * as actions from \"./actions\";\r\nimport { Action } from \"redux\";\r\nimport { isType } from 'typescript-fsa';\r\nimport { authReducerContext } from \"./types\";\r\n\r\n\r\nexport const isLoggedIn: authReducerContext = {\r\n    isLoggedIn: false,\r\n};\r\n\r\n\r\nexport function authReducer(state: typeof isLoggedIn = isLoggedIn, action: Action): typeof isLoggedIn {\r\n    if (isType(action, actions.SetIsLoggedInAction)) {\r\n        return {\r\n            ...state, isLoggedIn: action.payload.isLoggedIn\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return state;\r\n}","import * as actions from \"./actions\";\r\nimport { Action } from \"redux\";\r\nimport { isType } from 'typescript-fsa';\r\nimport { highScoreReducerContent } from \"./types\";\r\n\r\n\r\nexport const initialHighScore: highScoreReducerContent = {\r\n    highScores: []\r\n};\r\n\r\n\r\nexport function highScoreReducer(state: typeof initialHighScore = initialHighScore, action: Action): typeof initialHighScore {\r\n    if (isType(action, actions.AddNewScoreAction)) {\r\n        return {\r\n            ...state, highScores: [...state.highScores, action.payload.highScore]\r\n        }\r\n    }\r\n\r\n    if (isType(action, actions.GetHighScoresAction.done)) {\r\n        return {\r\n            ...state, highScores: action.payload.result.highScores\r\n        }\r\n    }\r\n\r\n    return state;\r\n}","import { combineReducers } from 'redux';\r\nimport { gameRoundsReducer } from './game-round/reducers';\r\nimport { gameSettingsReducer } from './game/reducers';\r\nimport { authReducer } from './auth/reducers';\r\nimport { highScoreReducer } from './highscore/reducers';\r\n\r\nconst reducerArray = {\r\n    gameRoundsReducer,\r\n    gameSettingsReducer,\r\n    authReducer,\r\n    highScoreReducer,\r\n}\r\n\r\nconst store = combineReducers({\r\n    ...reducerArray\r\n})\r\n\r\nexport type coreAppState = {\r\n    [K in keyof typeof reducerArray]: ReturnType<typeof reducerArray[K]>;\r\n}\r\n\r\nexport type AppState = coreAppState;\r\n\r\nexport default store;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister().then((s) => console.log('Service-Worker is now unregistered'));\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport appState from \"./state/store\";\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\n\r\nconst store = createStore(appState);\r\nexport default store;\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}