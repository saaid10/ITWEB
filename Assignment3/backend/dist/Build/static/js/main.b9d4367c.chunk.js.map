{"version":3,"sources":["utils/random-generator.ts","state/game-round/actions.ts","state/game-round/constants.ts","state/game/actions.ts","state/game/constants.ts","state/game/operations.ts","utils/rounds.ts","constants.ts","components/dual-back-grid-item.tsx","components/dual-back-grid.tsx","components/dual-n-back.tsx","state/game-round/operations.ts","components/pages/Game.tsx","state/auth/actions.ts","state/auth/constants.ts","state/auth/operations.ts","components/auth/Login.tsx","components/auth/Register.tsx","components/auth/AuthOptions.tsx","components/layout/Header.tsx","components/auth/private-route.tsx","components/highscore-display.tsx","App.tsx","reportWebVitals.ts","state/game-round/reducers.ts","state/game/reducers.ts","state/auth/reducers.ts","state/store.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["GetRandomNumber","max","Math","floor","random","GetRandomLetter","characters","charAt","length","actionCreator","actionCreatorFactory","AddGameRoundAction","ClearGameRoundsAction","SetNBackAction","SetIsRunningAction","AddToSameLetterAction","AddToSameLocationAction","ClearScoreAction","SetIsRunningOperation","isRunning","dispatch","AddToCorrectLocationOperation","amountToAdd","AddToCorrectLetterOperation","getRoundsLeft","state","store","getState","gameSettingsReducer","gameSettings","nBack","gameRoundsReducer","rounds","DualBackGridItem","props","gameList","useSelector","round","roundLetter","Xpossition","x","Ypossition","y","Letter","undefined","useState","showLetter","setShowLetter","useEffect","setTimeout","letterViewTimeSeconds","className","DualBackGrid","useDispatch","onClick","curr","last","onContextMenu","e","preventDefault","gridItems","i","j","push","gridGenerator","DualNBack","numberOfCorrectLocation","currentGameScore","correctSameLocation","numberOfCorrectLetter","correctSameLetter","clearGame","ClearGameRoundsOperation","secondsBetweenLetters","interval","setInterval","msg","SpeechSynthesisUtterance","window","speechSynthesis","speak","dispach","gameRound","AddGameRoundOperation","clearInterval","Slider","defaultValue","min","value","onChange","n","SetNBackOperation","aria-labelledby","valueLabelDisplay","disabled","Button","variant","ClearScoreOperation","color","hidden","Game","SetIsLoggedInAction","SetIsLoggedInOperation","isLoggedIn","Login","history","useHistory","userName","setUserName","userPassword","setUserPassword","event","a","console","log","fetch","method","headers","body","JSON","stringify","username","password","response","status","TextField","label","type","target","Register","userConfirmPassword","setUserConfirmPassword","confirmPassword","AuthOptions","isAuthenticated","authReducer","Header","id","to","PrivateRoute","exact","path","component","HighscoreDisplay","highscores","level","score","time","Date","TableContainer","Paper","TableHead","TableRow","TableCell","TableBody","sort","b","map","highscore","toLocaleDateString","toLocaleTimeString","App","location","origin","replace","ws","WebSocket","process","onopen","onmessage","evt","message","parse","data","onclose","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialGameState","initialGameSettings","reducerArray","action","isType","actions","payload","combineReducers","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","createStore","appState","ReactDOM","render","document","getElementById","URL","href","addEventListener","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.b9d4367c.chunk.js","sourcesContent":["\r\nexport const GetRandomNumber = (max: number) => {\r\n    return Math.floor(Math.random() * max);\r\n}\r\n\r\n\r\nexport const GetRandomLetter = () => {\r\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n    return characters.charAt(Math.floor(Math.random() * characters.length));\r\n}","import * as constants from \"./constants\";\r\nimport { GameRound } from \"./types\";\r\nimport actionCreatorFactory from 'typescript-fsa';\r\n\r\nconst actionCreator = actionCreatorFactory(\"GameRoundActions\");\r\n\r\n\r\nexport const AddGameRoundAction = actionCreator<{gameRound: GameRound}>(constants.ADD_GAME_ROUNDS);\r\nexport const ClearGameRoundsAction = actionCreator(constants.CLEAR_GAME_ROUNDS);","\r\n\r\nexport const ADD_GAME_ROUNDS = 'ADD_GAME_ROUNDS';\r\nexport const CLEAR_GAME_ROUNDS = 'CLEAR_GAME_ROUNDS';\r\n","import * as constants from \"./constants\";\r\nimport actionCreatorFactory from 'typescript-fsa';\r\n\r\nconst actionCreator = actionCreatorFactory(\"GameSettingActions\");\r\n\r\n\r\nexport const SetNBackAction = actionCreator<{nBack: number}>(constants.SET_N_BACK);\r\nexport const SetIsRunningAction = actionCreator<{isRunning: boolean}>(constants.SET_IS_RUNNING);\r\nexport const AddToSameLetterAction = actionCreator<{amountToAdd: number}>(constants.ADD_TO_SAME_LETTER);\r\nexport const AddToSameLocationAction = actionCreator<{amountToAdd: number}>(constants.ADD_TO_SAME_LOCATION);\r\nexport const ClearScoreAction = actionCreator(constants.CLEAR_SCORE);","export const SET_N_BACK = 'SET_N_BACK';\r\nexport const SET_IS_RUNNING = 'SET_IS_RUNNING';\r\nexport const ADD_TO_SAME_LETTER = 'ADD_TO_SAME_LETTER';\r\nexport const ADD_TO_SAME_LOCATION = 'ADD_TO_SAME_LOCATION';\r\nexport const CLEAR_SCORE = \"CLEAR_SCORE\";\r\n\r\n","import { Dispatch } from \"redux\";\r\nimport { AddToSameLetterAction, AddToSameLocationAction, ClearScoreAction, SetIsRunningAction, SetNBackAction } from \"./actions\";\r\n\r\nexport const SetNBackOperation = (n: number) => {\r\n    return (dispatch: Dispatch) => dispatch(SetNBackAction({ nBack: n }));\r\n}\r\n\r\nexport const SetIsRunningOperation = (isRunning: boolean) => {\r\n    return (dispatch: Dispatch) => dispatch(SetIsRunningAction({ isRunning }));\r\n}\r\n\r\nexport const AddToCorrectLocationOperation = (amountToAdd: number) => {\r\n    return (dispatch: Dispatch) => dispatch(AddToSameLocationAction({ amountToAdd }));\r\n}\r\n\r\nexport const AddToCorrectLetterOperation = (amountToAdd: number) => {\r\n    return (dispatch: Dispatch) => dispatch(AddToSameLetterAction({ amountToAdd }));\r\n}\r\n\r\nexport const ClearScoreOperation = () => {\r\n    return (dispatch: Dispatch) => dispatch(ClearScoreAction());\r\n}","import store from \"..\"\r\nimport { gameLength } from \"../constants\"\r\n\r\nexport const getRoundsLeft = (): number => {\r\n    const state = store.getState();\r\n    return gameLength + state.gameSettingsReducer.gameSettings.nBack - state.gameRoundsReducer.rounds.length;\r\n}","\r\nexport const gameLength: number = 24;\r\nexport const secondsBetweenLetters: number = 3;\r\nexport const letterViewTimeSeconds: number = 1;","import { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { letterViewTimeSeconds } from \"../constants\";\r\nimport { GameRound } from \"../state/game-round/types\";\r\nimport { AppState } from \"../state/store\";\r\n\r\ntype Props = {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport const DualBackGridItem = (props: Props) => {\r\n    const gameList: GameRound[] = useSelector((state: AppState) => state.gameRoundsReducer.rounds);\r\n    const round: GameRound = gameList[gameList.length - 1];\r\n\r\n    const roundLetter: string | undefined = (round && round.Xpossition === props.x && round.Ypossition === props.y) ? round.Letter : undefined;\r\n\r\n    const [showLetter, setShowLetter] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (roundLetter) {\r\n            setShowLetter(true);\r\n            setTimeout(() => { setShowLetter(false); }, letterViewTimeSeconds * 1000);\r\n        }\r\n    }, [round, roundLetter])\r\n\r\n    return (\r\n        <div className={\"grid-item \" + ((roundLetter && showLetter) ? \"active-letter\" : \"letter\")}>\r\n            {roundLetter && showLetter &&\r\n                <h1>{roundLetter}</h1>\r\n            }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { GameRound } from \"../state/game-round/types\";\r\nimport { AddToCorrectLetterOperation, AddToCorrectLocationOperation } from \"../state/game/operations\";\r\nimport { AppState } from \"../state/store\";\r\nimport { DualBackGridItem } from \"./dual-back-grid-item\"\r\nimport \"./dual-back.scss\";\r\n\r\n\r\nexport const DualBackGrid = () => {\r\n    const nBack: number = useSelector((state: AppState) => state.gameSettingsReducer.gameSettings.nBack);\r\n    const isRunning: boolean = useSelector((state: AppState) => state.gameSettingsReducer.gameSettings.isRunning);\r\n    const rounds: GameRound[] = useSelector((state: AppState) => state.gameRoundsReducer.rounds);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const checkSameLocation = () => {\r\n        if (!isRunning) return;\r\n        if (rounds.length > nBack) {\r\n            const curr: GameRound = rounds[rounds.length - 1];\r\n            const last: GameRound = rounds[rounds.length - (nBack + 1)];\r\n\r\n\r\n            if (curr.Xpossition === last.Xpossition && curr.Ypossition === last.Ypossition)\r\n                return AddToCorrectLocationOperation(1)(dispatch);\r\n        }\r\n\r\n        return AddToCorrectLocationOperation(-1)(dispatch);\r\n    }\r\n\r\n    const checkSameLetter = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        e.preventDefault();\r\n        if (!isRunning) return;\r\n        if (rounds.length > nBack) {\r\n            const curr: string = rounds[rounds.length - 1].Letter;\r\n            const last: string = rounds[rounds.length - (nBack + 1)].Letter;\r\n\r\n            if (curr === last)\r\n                return AddToCorrectLetterOperation(1)(dispatch);\r\n        }\r\n\r\n        return AddToCorrectLetterOperation(-1)(dispatch);\r\n    }\r\n\r\n\r\n    const gridGenerator = (): JSX.Element[] => {\r\n        let gridItems: JSX.Element[] = [];\r\n        for (let i = 0; i < 3; i++) {\r\n            for (let j = 0; j < 3; j++) {\r\n                gridItems.push(<DualBackGridItem x={i} y={j} key={\"grid possition: \" + i + j} />);\r\n            }\r\n        }\r\n        return gridItems;\r\n    }\r\n\r\n    return (\r\n        <div className=\"dual-back-grid-container\" onClick={checkSameLocation} onContextMenu={checkSameLetter} >\r\n            {gridGenerator()}\r\n        </div>\r\n    )\r\n}","import { Button, Slider } from '@material-ui/core';\r\nimport React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { secondsBetweenLetters } from '../constants';\r\nimport { AddGameRoundOperation, ClearGameRoundsOperation } from '../state/game-round/operations';\r\nimport { ClearScoreOperation, SetIsRunningOperation, SetNBackOperation } from '../state/game/operations';\r\nimport { AppState } from '../state/store';\r\nimport { getRoundsLeft } from '../utils/rounds';\r\nimport { DualBackGrid } from './dual-back-grid';\r\n\r\n\r\nexport function DualNBack() {\r\n    const dispatch = useDispatch();\r\n    useSelector((state: AppState) => state.gameRoundsReducer.rounds);   //Only here to update EffectHook\r\n    const isRunning = useSelector((state: AppState) => state.gameSettingsReducer.gameSettings.isRunning);\r\n    const nBack: number = useSelector((state: AppState) => state.gameSettingsReducer.gameSettings.nBack);\r\n    const numberOfCorrectLocation: number = useSelector((state: AppState) => state.gameSettingsReducer.currentGameScore.correctSameLocation);\r\n    const numberOfCorrectLetter: number = useSelector((state: AppState) => state.gameSettingsReducer.currentGameScore.correctSameLetter);\r\n\r\n    const setNBack = (e: React.ChangeEvent<{}>, n: number | number[]) => {\r\n        if (typeof n === \"number\") {\r\n            SetNBackOperation(n)(dispatch);\r\n        }\r\n    }\r\n\r\n    const newGame = () => {\r\n        ClearScoreOperation()(dispatch);\r\n        SetIsRunningOperation(true)(dispatch);\r\n    }\r\n\r\n\r\n    const clearGame = () => {\r\n        SetIsRunningOperation(false)(dispatch);\r\n        ClearGameRoundsOperation()(dispatch);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (getRoundsLeft() === 0) {\r\n            setTimeout(() => {\r\n                clearGame();\r\n            }, secondsBetweenLetters * 1000)\r\n        }\r\n\r\n        const interval = setInterval(() => {\r\n            if (isRunning)\r\n                AddGameRoundOperation()(dispatch);\r\n        }, secondsBetweenLetters * 1000);\r\n\r\n        if (!isRunning)\r\n            clearInterval(interval);\r\n        return () => clearInterval(interval);\r\n    });\r\n\r\n    return (\r\n        <div className=\"center\">\r\n            <h1>Welcome to DualBallzBack</h1>\r\n\r\n            <div className=\"grid-container-3\">\r\n                <div className=\"flex-row\">\r\n                    <p className=\"margin-right-10px\"> Set N-back:</p>\r\n                    <div className=\"width-50px padding-top-5px\">\r\n                        <Slider\r\n                            defaultValue={1}\r\n                            min={1}\r\n                            max={10}\r\n                            value={nBack}\r\n                            onChange={setNBack}\r\n                            aria-labelledby=\"discrete-slider\"\r\n                            valueLabelDisplay=\"auto\"\r\n                            disabled={isRunning}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    onClick={isRunning ? clearGame : newGame}\r\n                    color={isRunning ? \"secondary\" : \"default\"}\r\n                >\r\n                    {isRunning ? \"Stop Game\" : \"New Game\"}\r\n                </Button>\r\n\r\n                <div>\r\n                    <p hidden={!isRunning}>Rounds left: {getRoundsLeft()}</p>\r\n                    <p hidden={isRunning}>Correct by letter: {numberOfCorrectLocation}</p>\r\n                    <p hidden={isRunning}>Correct by location: {numberOfCorrectLetter}</p>\r\n                </div>\r\n            </div>\r\n            <br />\r\n\r\n            <DualBackGrid />\r\n        </div>\r\n    );\r\n}\r\n","import { Dispatch } from \"redux\";\r\nimport { GetRandomLetter, GetRandomNumber } from \"../../utils/random-generator\";\r\nimport { AddGameRoundAction, ClearGameRoundsAction } from \"./actions\";\r\nimport { GameRound } from \"./types\";\r\n\r\n\r\nexport const AddGameRoundOperation = () => {\r\n    const round: GameRound = {\r\n        Xpossition: GetRandomNumber(3),\r\n        Ypossition: GetRandomNumber(3),\r\n        Letter: GetRandomLetter()\r\n    }\r\n    var msg = new SpeechSynthesisUtterance(round.Letter);\r\n    window.speechSynthesis.speak(msg);\r\n    return (dispach: Dispatch) => dispach(AddGameRoundAction({ gameRound: round }));\r\n}\r\n\r\n\r\nexport const ClearGameRoundsOperation = () => {\r\n    return (dispatch: Dispatch) => dispatch(ClearGameRoundsAction());\r\n}","import React from 'react'\r\n\r\nimport { DualNBack } from '../dual-n-back';\r\n\r\nfunction Game() {\r\n    return (\r\n        <DualNBack/>\r\n    )\r\n}\r\n\r\n\r\nexport default Game\r\n\r\n","import * as constants from \"./constants\";\r\nimport actionCreatorFactory from 'typescript-fsa';\r\n\r\nconst actionCreator = actionCreatorFactory(\"AuthActions\");\r\n\r\nexport const SetIsLoggedInAction = actionCreator<{isLoggedIn: boolean}>(constants.IS_LOGGED_IN);\r\n","export const IS_LOGGED_IN = 'IS_LOGGED_IN';\r\n\r\n\r\n","import { Dispatch } from \"redux\";\r\nimport { SetIsLoggedInAction } from \"./actions\";\r\n\r\nexport const SetIsLoggedInOperation = (isLoggedIn: boolean) => {\r\n    return (dispatch: Dispatch) => dispatch(SetIsLoggedInAction({ isLoggedIn }));\r\n}\r\n\r\n","import React, { useState } from 'react'\r\nimport {TextField} from '@material-ui/core'\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { Route, useHistory } from 'react-router-dom';\r\nimport { SetIsLoggedInOperation } from '../../state/auth/operations';\r\nimport './Login.scss';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nfunction Login() {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const [userName, setUserName] = useState('');\r\n    const [userPassword, setUserPassword] = useState('');\r\n\r\n    async function handleSubmit(event: any) {\r\n        console.log(userName, userPassword);\r\n        \r\n        // Something async\r\n\r\n        const response = await fetch('/api/auth/login', {\r\n                        method: 'POST', \r\n                        headers: {'Content-Type': 'application/json'}, \r\n                        body: JSON.stringify({username: userName, password: userPassword})});\r\n\r\n        console.log(response.status)\r\n\r\n        if (response.status === 200)\r\n        {\r\n            console.log('user auth - 200 ok');\r\n            SetIsLoggedInOperation(true)(dispatch);\r\n            history.push('/')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Log In</h1>\r\n            <p>Enter username and password:</p>\r\n            <div className=\"input-box\"><TextField label=\"User Name\" type='text' value={userName} onChange={(e) => setUserName(e.target.value)} /></div>\r\n            <div className=\"input-box\"><TextField label=\"Password\" type='password' value={userPassword} onChange={(e) => setUserPassword(e.target.value)} />\r\n            <div className=\"login-button\"><Button variant=\"contained\" onClick={handleSubmit}>login</Button></div></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useState} from 'react'\r\nimport {TextField} from '@material-ui/core'\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { useHistory } from 'react-router-dom';\r\nimport { SetIsLoggedInOperation } from '../../state/auth/operations';\r\nimport './Login.scss';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nfunction Register() {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const [userName, setUserName] = useState('');\r\n    const [userPassword, setUserPassword] = useState('');\r\n    const [userConfirmPassword, setUserConfirmPassword] = useState('');\r\n\r\n    async function handleSubmit(event: any) {\r\n        console.log(userName, userPassword);\r\n        \r\n        // Something async\r\n        const response = await fetch('/api/auth/registration', {\r\n            method: 'POST', \r\n            headers: {'Content-Type': 'application/json'}, \r\n            body: JSON.stringify({username: userName, password: userPassword, confirmPassword: userConfirmPassword})});\r\n\r\n\r\n        if (response.status == 200)\r\n        {\r\n            console.log('Registration auth - 200 ok');\r\n            SetIsLoggedInOperation(true)(dispatch);\r\n            history.push('/')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"input-box\">Register</h1>\r\n            <p className=\"input-box\">Enter username and password:</p>\r\n            <div className=\"input-box\"><TextField label=\"User Name\" type='text' value={userName} onChange={(e) => setUserName(e.target.value)} /></div>\r\n            <div className=\"input-box\"><TextField label=\"Password\" type='password' value={userPassword} onChange={(e) => setUserPassword(e.target.value)} /></div>\r\n            <div className=\"input-box\"><TextField label=\"Confirm Password\" type='password' value={userConfirmPassword} onChange={(e) => setUserConfirmPassword(e.target.value)} /></div>\r\n            <div className=\"login-button\"><Button variant=\"contained\" onClick={handleSubmit}>Submit</Button></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register\r\n\r\n","import React, { useContext, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { SetIsLoggedInOperation } from '../../state/auth/operations';\r\nimport { AppState } from '../../state/store';\r\n\r\nfunction AuthOptions() {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const isAuthenticated = useSelector((state: AppState) => state.authReducer.isLoggedIn)\r\n\r\n    const logout = () => {\r\n        SetIsLoggedInOperation(false)(dispatch);\r\n    }\r\n\r\n    // Use history to change url\r\n    const history = useHistory();\r\n    const register = () => history.push(\"/register\");\r\n    const login = () => history.push(\"/login\");\r\n\r\n    return (\r\n        <nav className=\"auth-options\">\r\n            {isAuthenticated ? (\r\n                <button onClick={logout}>Log Out</button>\r\n            ) : (\r\n                    <>\r\n                        <button onClick={register}>Register</button>\r\n                        <button onClick={login}>Log in</button>\r\n                    </>\r\n                )}\r\n\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default AuthOptions\r\n\r\n","import React from 'react'\r\nimport {Link, useHistory} from \"react-router-dom\";\r\nimport AuthOptions from '../auth/AuthOptions'\r\n\r\nfunction Header() {\r\n    const history = useHistory();\r\n    return (\r\n        <header id=\"header\">\r\n            <Link to=\"/\">\r\n                <h1 className=\"title\">Dual-Ballz-Back</h1>\r\n            </Link>\r\n            <nav className=\"auth-options\">\r\n                <button onClick={() => history.push('/highscore')}>Highscores</button>\r\n            </nav>\r\n            <AuthOptions />\r\n        </header>\r\n    )\r\n}\r\n\r\n\r\nexport default Header\r\n\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState } from '../../state/store';\r\n\r\nimport { RouteProps, Route } from \"react-router-dom\";\r\nimport Login from './Login';\r\n\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nfunction PrivateRoute(props: RouteProps){\r\n    const isLoggedIn =  useSelector((state: AppState) => state.authReducer.isLoggedIn)  \r\n\r\n    const history = useHistory();\r\n\r\n    if (!isLoggedIn)\r\n        history.push('/login')\r\n    \r\n    return (\r\n        <div>\r\n            {\r\n                props.exact ?\r\n                    <Route exact={true} path={props.path} component={props.component} /> \r\n                    :\r\n                    <Route exact={false} path={props.path} component={props.component} />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PrivateRoute;","import {\r\n    Paper,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow\r\n} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {highScore} from \"../state/highscore/types\";\r\nimport {AppState} from \"../state/store\";\r\nimport './highscore-display.scss'\r\n\r\n\r\nexport function HighscoreDisplay() {\r\n    const nBack: number = useSelector((state: AppState) => state.gameSettingsReducer.gameSettings.nBack);\r\n    const highscores: highScore[] = [\r\n        {level: 1, score: 300, time: new Date()},\r\n        {level: 1, score: 400, time: new Date()},\r\n        {level: 1, score: 500, time: new Date()}\r\n    ]\r\n\r\n    return (\r\n        <div className=\"tableContainer\">\r\n            <h2>Here you can see the highscores of other users, on the same level as you ({nBack})</h2>\r\n            <TableContainer component={Paper} className=\"tableContainer\">\r\n                <table className=\"table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell className=\"item\">Level</TableCell>\r\n                            <TableCell className=\"item\">Score</TableCell>\r\n                            <TableCell className=\"item\">Time</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {highscores.sort((a, b) => (a.score > b.score) ? -1 : 1).map((highscore) => (\r\n                            <TableRow>\r\n                                <TableCell className=\"item\">{highscore.level}</TableCell>\r\n                                <TableCell className=\"item\">{highscore.score}</TableCell>\r\n                                <TableCell className=\"item\">{highscore.time.toLocaleDateString() + \" \" + highscore.time.toLocaleTimeString()}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </table>\r\n            </TableContainer>\r\n        </div>\r\n    )\r\n}\r\n","\r\nimport React, { useEffect } from 'react';\r\nimport './style/style.css';\r\nimport \"./App.scss\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport Game from './components/pages/Game'\r\nimport Login from './components/auth/Login'\r\nimport Register from './components/auth/Register'\r\nimport Header from './components/layout/Header'\r\nimport PrivateRoute from './components/auth/private-route';\r\nimport { HighscoreDisplay } from \"./components/highscore-display\";\r\n\r\nfunction App() {\r\n  let HOST = window.location.origin.replace(/^http/, 'ws')\r\n  const ws = new WebSocket(process.env.REACT_APP_BACKEND_WS_URL || HOST);\r\n\r\n  useEffect(() => {\r\n    ws.onopen = () => {\r\n      // on connecting, do nothing but log it to the console\r\n      console.log('connected')\r\n    }\r\n\r\n    ws.onmessage = evt => {\r\n      // listen to data sent from the websocket server\r\n      const message = JSON.parse(evt.data)\r\n      console.log(message)\r\n    }\r\n\r\n    ws.onclose = () => {\r\n      console.log('disconnected')\r\n      // automatically try to reconnect on connection loss\r\n\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <BrowserRouter>\r\n        <Header />\r\n        <Switch>\r\n          <PrivateRoute exact path=\"/\" component={Game} />\r\n          <Route path=\"/login\" component={Login} />\r\n          <Route path=\"/register\" component={Register} />\r\n          <Route path=\"/highscore\" component={HighscoreDisplay} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import * as actions from \"./actions\";\r\nimport { Action } from \"redux\";\r\nimport { isType } from 'typescript-fsa';\r\nimport { GameRounds } from \"./types\";\r\n\r\n\r\nexport const initialGameState: GameRounds = {\r\n    rounds: [],\r\n};\r\n\r\n\r\nexport function gameRoundsReducer(state: typeof initialGameState = initialGameState, action: Action): typeof initialGameState {\r\n    if (isType(action, actions.AddGameRoundAction)) {\r\n        return {\r\n            ...state, rounds: [...state.rounds, action.payload.gameRound]\r\n        }\r\n    }\r\n\r\n    if (isType(action, actions.ClearGameRoundsAction)) {\r\n        return {\r\n            ...state, rounds: []\r\n        }\r\n    }\r\n\r\n\r\n    return state;\r\n}","import * as actions from \"./actions\";\r\nimport { Action } from \"redux\";\r\nimport { isType } from 'typescript-fsa';\r\nimport { Game } from \"./types\";\r\n\r\n\r\nexport const initialGameSettings: Game = {\r\n    gameSettings: {\r\n        nBack: 1,\r\n        isRunning: false,\r\n    },\r\n    currentGameScore: {\r\n        correctSameLocation: 0,\r\n        correctSameLetter: 0,\r\n    },\r\n\r\n};\r\n\r\n\r\nexport function gameSettingsReducer(state: typeof initialGameSettings = initialGameSettings, action: Action): typeof initialGameSettings {\r\n    if (isType(action, actions.SetNBackAction)) {\r\n        return {\r\n            ...state, gameSettings: {\r\n                ...state.gameSettings, nBack: action.payload.nBack\r\n            }\r\n        }\r\n    }\r\n\r\n    if (isType(action, actions.SetIsRunningAction)) {\r\n        return {\r\n            ...state, gameSettings: {\r\n                ...state.gameSettings, isRunning: action.payload.isRunning\r\n            }\r\n        }\r\n    }\r\n\r\n    if (isType(action, actions.AddToSameLetterAction)) {\r\n        return {\r\n            ...state, currentGameScore: {\r\n                ...state.currentGameScore, correctSameLetter: state.currentGameScore.correctSameLetter + action.payload.amountToAdd\r\n            }\r\n        }\r\n    }\r\n\r\n    if (isType(action, actions.AddToSameLocationAction)) {\r\n        return {\r\n            ...state, currentGameScore: {\r\n                ...state.currentGameScore, correctSameLocation: state.currentGameScore.correctSameLocation += action.payload.amountToAdd\r\n            }\r\n        }\r\n    }\r\n\r\n    if (isType(action, actions.ClearScoreAction)) {\r\n        return {\r\n            ...state, currentGameScore: {\r\n                ...state.currentGameScore,\r\n                correctSameLocation: 0,\r\n                correctSameLetter: 0\r\n            }\r\n        }\r\n    }\r\n\r\n    return state;\r\n}","import * as actions from \"./actions\";\r\nimport { Action } from \"redux\";\r\nimport { isType } from 'typescript-fsa';\r\nimport { authReducerContext } from \"./types\";\r\n\r\n\r\nexport const isLoggedIn: authReducerContext = {\r\n    isLoggedIn: false,\r\n};\r\n\r\n\r\nexport function authReducer(state: typeof isLoggedIn = isLoggedIn, action: Action): typeof isLoggedIn {\r\n    if (isType(action, actions.SetIsLoggedInAction)) {\r\n        return {\r\n            ...state, isLoggedIn: action.payload.isLoggedIn\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return state;\r\n}","import { combineReducers } from 'redux';\r\nimport { gameRoundsReducer } from './game-round/reducers';\r\nimport { gameSettingsReducer } from './game/reducers';\r\nimport { authReducer } from './auth/reducers';\r\n\r\nconst reducerArray = {\r\n    gameRoundsReducer,\r\n    gameSettingsReducer,\r\n    authReducer,\r\n}\r\n\r\n\r\nconst store = combineReducers({\r\n    ...reducerArray\r\n})\r\n\r\n\r\nexport type coreAppState = {\r\n    [K in keyof typeof reducerArray]: ReturnType<typeof reducerArray[K]>;\r\n}\r\n\r\nexport type AppState = coreAppState;\r\n\r\nexport default store;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister().then((s) => console.log('Service-Worker is now unregistered'));\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport appState from \"./state/store\";\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\n\r\nconst store = createStore(appState);\r\nexport default store;\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}